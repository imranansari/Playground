package  {		import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.NativeDragEvent;	import flash.desktop.ClipboardFormats;	import flash.desktop.NativeDragManager;	import flash.filesystem.File;	import flash.filesystem.FileStream;	import flash.filesystem.FileMode;	import flash.display.Loader;	import flash.events.Event;	import flash.net.URLRequest;	import flash.display.BitmapData;	import flash.utils.ByteArray;	import flash.geom.Matrix;	import flash.display.Bitmap;	import flash.display.PixelSnapping;	import com.adobe.images.PNGEncoder;	public class Chrome extends Sprite	{		private var sizes:Array = null;		private var file:File = null;		private var image:Loader = null;		private var bmp:Bitmap = null;				public function Chrome() 		{			super();			init();		}				private function init():void		{			var prefs:File = File.documentsDirectory.resolvePath( "sizes.txt" );			var stream:FileStream = null;			var data:String = null;						if( prefs.exists )			{				stream = new FileStream();				stream.open( prefs, FileMode.READ );				data = stream.readMultiByte( stream.bytesAvailable, File.systemCharset );				stream.close();				stream = null;				prefs = null;										sizes = data.split( "\n" );							} else {				sizes = [					"original",					"16",					"29",					"32",					"36",					"48",					"57",					"72",					"86",					"114",					"128",					"512"	 				];			}						hit.alpha = 0;			hit.addEventListener( NativeDragEvent.NATIVE_DRAG_ENTER, doHitEnter );			hit.addEventListener( NativeDragEvent.NATIVE_DRAG_EXIT, doHitExit );			hit.addEventListener( NativeDragEvent.NATIVE_DRAG_DROP, doHitDrop );						sign.addEventListener( MouseEvent.MOUSE_DOWN, doSignDown );						close.addEventListener( MouseEvent.CLICK, doCloseClick );		}				protected function doCloseClick( event:MouseEvent ):void		{			stage.nativeWindow.close();		}				protected function doHitDrop( event:NativeDragEvent ):void		{			var list:Array = event.clipboard.getData( ClipboardFormats.FILE_LIST_FORMAT ) as Array;						file = File( list[0] );						hit.alpha = 0;						if( image == null )			{				image = new Loader();				image.contentLoaderInfo.addEventListener( Event.COMPLETE, doImageComplete );			}						image.load( new URLRequest( file.url ) );		}				protected function doHitEnter( event:NativeDragEvent ):void		{			var list:Array = null;						if( event.clipboard.hasFormat( ClipboardFormats.FILE_LIST_FORMAT ) ) 			{				list = event.clipboard.getData( ClipboardFormats.FILE_LIST_FORMAT ) as Array;								if( list.length == 1 )				{					hit.alpha = 1;														NativeDragManager.acceptDragDrop( hit );				}			}		}				protected function doHitExit( event:NativeDragEvent ):void		{			hit.alpha = 0;		}						protected function doImageComplete( event:Event ):void		{			var unscaled:Bitmap = Bitmap( image.content );			var smooth:Bitmap = null;			var scaled:BitmapData = null;			var bytes:ByteArray = null;			var output:File = null;			var stream:FileStream = new FileStream();			var matrix:Matrix = null;			var scale:Number = 0;									unscaled.smoothing = true;			unscaled.pixelSnapping = PixelSnapping.NEVER;						for( var s:Number = 0; s < sizes.length; s++ )			{				smooth = new Bitmap( unscaled.bitmapData );				smooth.smoothing = true;								smooth.pixelSnapping = PixelSnapping.NEVER;								if( sizes[s] == "original" )				{					matrix = new Matrix();										scaled = new BitmapData( unscaled.width, unscaled.height, true, 0x00000000 );					scaled.draw( smooth, matrix );				} else {					if( parseInt( sizes[s] ) <= unscaled.width )					{						scale = parseInt( sizes[s] ) / unscaled.width;												matrix = new Matrix();						matrix.scale( scale, scale );												smooth.width = parseInt( sizes[s] );						smooth.height = parseInt( sizes[s] );												scaled = new BitmapData( parseInt( sizes[s] ), parseInt( sizes[s] ), true, 0x00000000 );						scaled.draw( smooth, matrix, null, null, null, true );					}				}								if( matrix != null )				{					bytes = PNGEncoder.encode( scaled );															output = File.desktopDirectory.resolvePath( "iconic/icon-" + sizes[s] + ".png" );										stream.open( output, FileMode.WRITE );					stream.writeBytes( bytes );					stream.close();																					matrix = null;				}			}						stream = null;			output = null;		}				protected function doSignDown( event:MouseEvent ):void		{			stage.nativeWindow.startMove();		}	}}