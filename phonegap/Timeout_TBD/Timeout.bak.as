package  {		import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.b2World;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2DebugDraw;	import flash.events.Event;	import Box2D.Collision.Shapes.b2CircleShape;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.Joints.b2JointDef;	import Box2D.Dynamics.Joints.b2DistanceJointDef;	import Box2D.Dynamics.b2Fixture;	public class Timeout extends Sprite	{		public static const PIXELS_PER_METER:Number = 30;		public static const WALL_WIDTH:Number = 2;				private var world:b2World = null;		private var iterations:Number = 0;		private var timestep:Number = 0;				public function Timeout() 		{			super();			init();		}				private function init():void		{			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						makeWorld();			makeWalls();			makeScene();			makeDebug();			addEventListener( Event.ENTER_FRAME, doEnterFrame );		}				private function makeDebug():void		{			var debug:b2DebugDraw = new b2DebugDraw();			var debugsprite:Sprite = new Sprite();						addChild( debugsprite );						debug.SetSprite( debugsprite );			debug.SetDrawScale( 30.0 );			debug.SetFillAlpha( 0.3 );			debug.SetLineThickness( 1.0 );			debug.SetFlags( b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit );						world.SetDebugDraw( debug );		}						private function makeScene():void		{			var bodydef:b2BodyDef = new b2BodyDef();			bodydef.type = b2Body.b2_dynamicBody;			bodydef.position.Set( 				( stage.stageWidth / 2 ) / PIXELS_PER_METER, 				( stage.stageHeight - 380 - 37 ) / PIXELS_PER_METER 			);			var shapedef:b2PolygonShape = new b2PolygonShape();						shapedef.SetAsOrientedBox(				17 / PIXELS_PER_METER, 				37 / PIXELS_PER_METER,				new b2Vec2(					0 / PIXELS_PER_METER,					0 / PIXELS_PER_METER				)			);			var circledef:b2CircleShape = new b2CircleShape( 				( 380 / 2 ) / PIXELS_PER_METER 			);						circledef.SetLocalPosition( 				new b2Vec2( 					0 / PIXELS_PER_METER, 					( ( 380 / 2 ) + 37 ) / PIXELS_PER_METER 				) 			);			var fixturedef:b2FixtureDef = new b2FixtureDef();			fixturedef.shape = shapedef;			var fixturedef2:b2FixtureDef = new b2FixtureDef();			fixturedef2.shape = circledef;			fixturedef2.density = 1.0;			fixturedef2.restitution = 0.1;									var body:b2Body = null;						body = world.CreateBody( bodydef );			body.CreateFixture( fixturedef );			body.CreateFixture( fixturedef2 );									/*			var body:b2Body = null;						var top:b2Body = null;			var watch:b2Body = null;			var bodydef:b2BodyDef = null;			var jointdef:b2DistanceJointDef = null;			var boxdef:b2PolygonShape = null;			var circledef:b2CircleShape = null;			var fixture:b2FixtureDef = null;			var anchora:b2Vec2 = null;			var anchorb:b2Vec2 = null;						bodydef = new b2BodyDef();			body = world.CreateBody( bodydef );						bodydef = new b2BodyDef();						circledef = new b2CircleShape( ( 380 / 2 ) / PIXELS_PER_METER );						fixture = new b2FixtureDef();			fixture.shape = circledef;			fixture.density = 1.0;			fixture.restitution = 0.1;						bodydef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight - ( 379 / 2 ) ) / PIXELS_PER_METER );						watch = world.CreateBody( bodydef );			watch.CreateFixture( fixture );			*/									/*			// Chain link			for( var c:Number = 0; c < 5; c++ )			{				bodydef = new b2BodyDef();				bodydef.type = b2Body.b2_staticBody;					boxdef = new b2PolygonShape();									fixture = new b2FixtureDef();				fixture.shape = boxdef;				fixture.density = 1.0;				fixture.restitution = 0.1;									boxdef.SetAsBox( 17 / PIXELS_PER_METER, 33 / PIXELS_PER_METER );				bodydef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( 20 + ( 45 * c ) ) / PIXELS_PER_METER );								body = world.CreateBody( bodydef );				body.CreateFixture( fixture );										}			// Watch top			bodydef = new b2BodyDef();			bodydef.type = b2Body.b2_dynamicBody;			boxdef = new b2PolygonShape();							fixture = new b2FixtureDef();			fixture.shape = boxdef;			fixture.density = 1.0;			fixture.restitution = 0.1;							boxdef.SetAsBox( 17 / PIXELS_PER_METER, 37 / PIXELS_PER_METER );			bodydef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight - 418 ) / PIXELS_PER_METER );						top = world.CreateBody( bodydef );			top.CreateFixture( fixture );			// Watch face			bodydef = new b2BodyDef();			bodydef.type = b2Body.b2_dynamicBody;						circledef = new b2CircleShape( ( 380 / 2 ) / PIXELS_PER_METER );						fixture = new b2FixtureDef();			fixture.shape = circledef;			fixture.density = 1.0;			fixture.restitution = 0.1;						bodydef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight - ( 379 / 2 ) ) / PIXELS_PER_METER );						watch = world.CreateBody( bodydef );			watch.CreateFixture( fixture );						// Top and face joint			anchora = new b2Vec2( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight - ( 379 / 2 ) ) / PIXELS_PER_METER );			anchorb = new b2Vec2( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight - 418 ) / PIXELS_PER_METER );						jointdef = new b2DistanceJointDef();			jointdef.Initialize( watch, top, anchora, anchorb );			jointdef.collideConnected = false;						world.CreateJoint( jointdef );			*/						// Trouble maker			bodydef = new b2BodyDef();			bodydef.type = b2Body.b2_dynamicBody;						circledef = new b2CircleShape( ( 100 / 2 ) / PIXELS_PER_METER );						var fixture:b2FixtureDef = new b2FixtureDef();			fixture.shape = circledef;			fixture.density = 1.0;			fixture.restitution = 0.1;						bodydef.position.Set( ( ( stage.stageWidth / 2 ) + 30 ) / PIXELS_PER_METER, 50 / PIXELS_PER_METER );						body = world.CreateBody( bodydef );			body.CreateFixture( fixture );					}				private function makeWalls():void		{			var wall:b2PolygonShape = new b2PolygonShape();			var walldef:b2BodyDef = new b2BodyDef();			var wallbody:b2Body = null; 			// Left			walldef.position.Set( ( 0 - WALL_WIDTH ) / PIXELS_PER_METER, ( stage.stageHeight / 2 ) / PIXELS_PER_METER );			wall.SetAsBox( WALL_WIDTH / PIXELS_PER_METER, ( stage.stageHeight / 2 ) / PIXELS_PER_METER );			wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );						// Right			walldef.position.Set( ( ( stage.stageWidth - WALL_WIDTH ) + ( WALL_WIDTH + 1 ) ) / PIXELS_PER_METER, ( stage.stageHeight / 2 ) / PIXELS_PER_METER );			wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );						// Top			walldef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( 0 - WALL_WIDTH ) / PIXELS_PER_METER );			wall.SetAsBox( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, 2 / PIXELS_PER_METER );			wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );						// Bottom			walldef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight + ( WALL_WIDTH + 1 ) ) / PIXELS_PER_METER );			wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );					}				private function makeWorld():void		{			var gravity:b2Vec2 = new b2Vec2( 0.0, 10.0 );			var sleep:Boolean = true;						world = new b2World( gravity, sleep );			world.SetWarmStarting( true );						timestep = 1.0 / 30.0;			iterations = 10;					}				private function update( event:Event = null ):void		{			world.Step( timestep, iterations, iterations );			world.ClearForces();						// Render			world.DrawDebugData();		}						protected function doEnterFrame( event:Event ):void		{			update();		}	}}