package{	import Box2D.Collision.Shapes.b2CircleShape;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2DebugDraw;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.b2World;		import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;		public class Timeout extends Sprite	{		public static const PIXELS_PER_METER:Number = 30;		public static const WALL_WIDTH:Number = 2;						private var world:b2World = null;		private var iterations:Number = 0;		private var timestep:Number = 0;						public function Timeout()		{			super();			init();		}				private function init():void		{			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;								// stage.addEventListener( Event.RESIZE, doResize );			doResize( null );		}				private function makeDebug():void		{			var debug:b2DebugDraw = new b2DebugDraw();			var debugsprite:Sprite = new Sprite();						addChild( debugsprite );						debug.SetSprite( debugsprite );			debug.SetDrawScale( 30.0 );			debug.SetFillAlpha( 0.3 );			debug.SetLineThickness( 1.0 );			debug.SetFlags( b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit );						world.SetDebugDraw( debug );		}						private function makeScene():void		{			var my_body:b2BodyDef= new b2BodyDef();						my_body.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight - 190 ) / PIXELS_PER_METER );			my_body.type = b2Body.b2_dynamicBody;						var my_circle:b2CircleShape = new b2CircleShape( 190 / PIXELS_PER_METER );			var my_fixture:b2FixtureDef = new b2FixtureDef();						my_fixture.shape = my_circle;						var world_body:b2Body=world.CreateBody(my_body);						world_body.CreateFixture(my_fixture);		}				private function makeWalls():void		{			var wall:b2PolygonShape = new b2PolygonShape();			var walldef:b2BodyDef = new b2BodyDef();			var wallbody:b2Body = null;						// Left			walldef.position.Set( ( 0 - WALL_WIDTH ) / PIXELS_PER_METER, ( stage.stageHeight / 2 ) / PIXELS_PER_METER );			wall.SetAsBox( WALL_WIDTH / PIXELS_PER_METER, ( stage.stageHeight / 2 ) / PIXELS_PER_METER );			wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );						// Right			walldef.position.Set( ( ( stage.stageWidth - WALL_WIDTH ) + ( WALL_WIDTH + 1 ) ) / PIXELS_PER_METER, ( stage.stageHeight / 2 ) / PIXELS_PER_METER );			wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );						// Top			walldef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( 0 - WALL_WIDTH ) / PIXELS_PER_METER );			wall.SetAsBox( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, 2 / PIXELS_PER_METER );			wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );						// Bottom			walldef.position.Set( ( stage.stageWidth / 2 ) / PIXELS_PER_METER, ( stage.stageHeight + WALL_WIDTH - 1 ) / PIXELS_PER_METER );						wallbody = world.CreateBody( walldef );			wallbody.CreateFixture2( wall );		}						private function makeWorld():void		{			var gravity:b2Vec2 = new b2Vec2( 0.0, 10.0 );			var sleep:Boolean = true;						world = new b2World( gravity, sleep );			world.SetWarmStarting( true );						timestep = 1.0 / 30.0;			iterations = 10;					}						private function update( event:Event = null ):void		{			world.Step( timestep, iterations, iterations );			world.ClearForces();			world.DrawDebugData();		}						protected function doEnterFrame( event:Event ):void		{			update();		}				protected function doResize( event:Event ):void		{			stage.removeEventListener( Event.RESIZE, doResize );						makeWorld();			makeWalls();			makeScene();			makeDebug();									addEventListener( Event.ENTER_FRAME, doEnterFrame );				}	}}